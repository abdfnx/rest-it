name: Resto CI

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  GITHUB_TOKEN: ${{ github.token }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  bfs: # build from source
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Building From Source
      run: |
        go mod tidy
        go run ./scripts/date.go >> date.txt
        go build -ldflags "-X main.version=$(git describe --abbrev=0 --tags) -X main.buildDate=$(cat date.txt)" -o resto

    - name: Run `Restofile`
      run: |
        ./resto run -f ./examples/restofile/basic_request/Restofile

  bfs_windows: # build from source (windows)
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Building From Source
      run: |
        .\scripts\bfs.ps1
        echo "::add-path::C:\Users\runneradmin\AppData\Local\resto\bin\;"

    - name: Test it
      run: resto run -f ./examples/restofile/basic_request/RestoFile

  from_script:
    needs: [ bfs ]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install from script
      run: curl -sL https://git.io/resto | bash

    - name: Test it
      run: resto get https://api.github.com/gitignore/templates/Go

  from_script_windows:
    needs: [ bfs_windows ]

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install from script
      run: |
        iwr -useb https://git.io/resto-win | iex
        echo "::add-path::C:\Users\runneradmin\AppData\Local\resto\bin\;"

    - name: Test it
      run: resto get https://api.github.com/organizations

  go:
    needs: [ bfs, bfs_windows ]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Install from Go
      run: go install github.com/abdfnx/resto@latest

    - name: Install `deno` from resto
      run: |
        resto install https://deno.land/x/install/install.sh
        export DENO_INSTALL="/home/runner/.deno"
        export PATH="$DENO_INSTALL/bin:$PATH"

        deno -V
        deno run https://deno.land/std/examples/welcome.ts

  snapshot:
    needs: [ bfs, bfs_windows, go ]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Set up `GoReleaser`
        uses: goreleaser/goreleaser-action@v2
        with:
          install-only: true

      - name: Set up `Date`
        run: go run ./build/date.go >> date.txt

      - name: Build
        run: BuildDate="$(cat date.txt)" goreleaser release --snapshot --rm-dist --timeout 100m

  from_gh_cli:
    needs: [ bfs, bfs_windows, go, snapshot ]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install from GitHub CLI as extension
      run: gh extension install abdfnx/gh-resto

    - name: Test it
      run: |
        gh resto get https://api.secman.dev
        cat examples/spacex.gql | gh resto post https://api.spacex.land/graphql -c graphql --body-stdin

  homebrew:
    needs: [ bfs, snapshot ]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Get Resto via homebrew
      run: brew install abdfnx/tap/resto

    - name: Run `resto help`
      run: resto help

  via_docker:
    needs: [ bfs, from_script, go ]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Run in docker container
      run: cat examples/job.json | docker run --rm -i restohq/resto put https://reqres.in/api/users/878 -c json --body-stdin
